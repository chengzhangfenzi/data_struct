#include<stdio.h>
#include<stdlib.h>
#define ONEMIN 5
#define FIVEMIN 12
#define ONEHOUR 12
#define BALLQUE 28
#define OK 1
#define ERROR 0
typedef int data_t;
//定义顺序栈
typedef int data_t;
typedef struct
{
	data_t *data;
	int top;//栈顶
	int maxlen;
}SqStack;
//定义顺序队列
typedef struct
{
	data_t *data;
	int front;//队头位置
	int rear;//队尾位置
	int maxlen;
}SqQueue;
//创建顺序栈->判空->判满->压栈->弹栈
SqStack *CreateEmptyStack(int length)//创建栈
{
    SqStack *stack = (SqStack*)malloc(sizeof(SqStack));
    if(stack==NULL)
    {
        printf("CreateEmptyStack Error\n");
        exit(0);
    }
    stack->data = (data_t*)malloc(sizeof(data_t)*length);
    stack->maxlen=length;
    stack->top=-1;
    return stack;
}
int EmptyStack(SqStack *s)//判断栈是否是空栈
{
	return -1==s->top?OK:ERROR;
}
int FullStack(SqStack *s)//判断栈是否是满栈
{
	return s->maxlen-1==s->top?OK:ERROR;
}
int PushStack(SqStack *s,data_t e)//压栈
{
	if(s->top==s->maxlen-1)
	{
		printf("Stack is Full\n");
		return ERROR;
	}
	s->top++;
	s->data[s->top]=e;
	return OK;
}
data_t PopStack(SqStack *s)//弹栈
{
	if(s->top==-1)
	{
		printf("Stack is Empty\n");
		return ERROR;
	}
	data_t e=s->data[s->top];
	s->top--;
	return e;
}
//创建顺序队列->判空->判满->入队->出队
SqQueue *CreateEmptyQueue(int length)//创建队列
{
	SqQueue *sq = (SqQueue*)malloc(sizeof(SqQueue));
	if(sq==NULL)
	{
		printf("CreateEmptyQueue Error\n");
		return NULL;
	}
	sq->data = (data_t*)malloc(sizeof(data_t)*length);
	sq->maxlen=length;
	sq->front=0;
	sq->rear=0;
	return sq;
}
int EmptyQueue(SqQueue *Q)//判断队是否为空
{
	if(Q==NULL)
	{
		printf("EmptyQueue Error\n");
		return -1;
	}
	if(Q->rear==Q->front)
		return OK;
	else
		return ERROR;
}
int FullQueue(SqQueue *Q)//判断队是否已满
{
	if(Q==NULL)
	{
		printf("EmptyQueue Error\n");
		return -1;
	}
	if((Q->rear+1)%Q->maxlen==Q->front)
		return OK;
	else
		return ERROR;
}
int EnQueue(SqQueue *Q,data_t e)//入队
{
	if(FullQueue(Q)==OK)
	{
		printf("Queue is Full\n");
		return ERROR;
	}
	Q->data[Q->rear]=e;
	Q->rear=(Q->rear+1)%Q->maxlen;
	return OK;
}
int DeQueue(SqQueue *Q,data_t *e)//出队
{
	if(EmptyQueue(Q)==OK)
	{
		printf("Queue is Empty\n");
		return ERROR;
	}
	*e=Q->data[Q->front];
	Q->front=(Q->front+1)%Q->maxlen;
	return OK;
}
//主函数实现调用功能并打印时间
int main()
{

}

